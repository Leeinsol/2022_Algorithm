{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "hw2_b993213_LIS.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 112,
      "metadata": {
        "id": "c2k9oRlmZVy7"
      },
      "outputs": [],
      "source": [
        "# 문제 1번: pop(index, k)를 호출하고, index번부터 연속된 k개의 원소(index번 원소를 포함하여 k개)를 삭제하고자 한다.\n",
        "# 구현 부분: line 30 ~ 41\n",
        "class ListNode:\n",
        "\tdef __init__(self, newItem, nextNode:'ListNode'):\n",
        "\t\tself.item = newItem\n",
        "\t\tself.next = nextNode\n",
        "\n",
        "class LinkedListBasic:\n",
        "\tdef __init__(self):\n",
        "\t\tself.__head = ListNode('dummy', None)\n",
        "\t\tself.__numItems = 0\n",
        "\n",
        "\t# [알고리즘 5 - 2] 구현: 연결 리스트에 원소 삽입하기(더미 헤드를 두는 대표 버전)\n",
        "\tdef insert(self, i:int, newItem):\n",
        "\t\tif i >= 0 and i <= self.__numItems:\n",
        "\t\t\tprev = self.__getNode(i - 1)\n",
        "\t\t\tnewNode = ListNode(newItem, prev.next)\n",
        "\t\t\tprev.next = newNode\n",
        "\t\t\tself.__numItems += 1\n",
        "\t\telse:\n",
        "\t\t\tprint(\"index\", i, \": out of bound in insert()\") # 필요 시 에러 처리\n",
        " \n",
        "\tdef append(self, newItem):\n",
        "\t\tprev = self.__getNode(self.__numItems - 1)\n",
        "\t\tnewNode = ListNode(newItem, prev.next)\n",
        "\t\tprev.next = newNode\n",
        "\t\tself.__numItems += 1\n",
        "\n",
        "\t# [알고리즘 5-3] 구현: 연결 리스트의 원소 삭제하기\n",
        "\t# 문제 1번 구현 부분\n",
        "\tdef pop(self, i:int, k:int):\n",
        "\t\tfor a in range(0,k):  # k개의 원소를 삭제하기 위해 k번 반복\n",
        "\t\t\tif (i >= 0 and i <= self.__numItems-1): #남은 노드가 k보다 작을 때 최대한도인 마지막 노드까지만 지우도록 함.\n",
        "\t\t\t\tprev = self.__getNode(i - 1)\n",
        "\t\t\t\tcurr = prev.next\n",
        "\t\t\t\tprev.next = curr.next\n",
        "\t\t\t\tretItem = curr.item\n",
        "\t\t\t\tself.__numItems -= 1\n",
        "\t\t\telse:\n",
        "\t\t\t\treturn None\n",
        "\t\treturn retItem\n",
        "\n",
        "\t\n",
        "\t# [알고리즘 5 -4] 구현: 연결 리스트의 원소 x 삭제하기 (더미 헤드를 두는 대표 버전)\n",
        "\tdef remove(self, x):\n",
        "\t\t(prev, curr) = self.__findNode(x)\n",
        "\t\tif curr != None:\n",
        "\t\t\tprev.next = curr.next\n",
        "\t\t\tself.__numItems -= 1\n",
        "\t\t\treturn x\n",
        "\t\telse:\n",
        "\t\t\treturn None\n",
        "\n",
        "\t# [알고리즘 5 - 5] 구현: 연결 리스트의 i번 원소 알려주기\n",
        "\tdef get(self, i:int):\n",
        "\t\tif self.isEmpty():\n",
        "\t\t\treturn None\n",
        "\t\tif (i >= 0 and i <= self.__numItems - 1):\n",
        "\t\t\treturn self.__getNode(i).item\n",
        "\t\telse:\n",
        "\t\t\treturn None\n",
        " \n",
        "\t# [알고리즘 5 -7] 구현: x가 연결 리스트의 몇 번 원소인지 알려주기\n",
        "\tdef index(self, x) -> int:\n",
        "\t\tcurr = self.__head.next\t # 0번 인덱스 노드:  더미 헤드 다음 노드 (즉, 첫번째 노드)\n",
        "\t\tfor index in range(self.__numItems):\n",
        "\t\t\tif curr.item == x:\n",
        "\t\t\t\treturn index\n",
        "\t\t\telse:\n",
        "\t\t\t\tcurr = curr.next\n",
        "\t\treturn -2 # 안 쓰는 인덱스\n",
        "\n",
        "\t# [알고리즘 5 -8] 구현: 기타 작업들\n",
        "\tdef isEmpty(self) -> bool:\n",
        "\t\treturn self.__numItems == 0\n",
        "\n",
        "\tdef size(self) -> int:\n",
        "\t\treturn self.__numItems\n",
        "\n",
        "\tdef clear(self):\n",
        "\t\tself.__head = ListNode(\"dummy\", None)\n",
        "\t\tself.__numItems = 0\n",
        "\n",
        "\tdef count(self, x) -> int:\n",
        "\t\tcnt = 0\n",
        "\t\tcurr = self.__head.next  # 0번 노드\n",
        "\t\twhile curr != None:\n",
        "\t\t\tif curr.item == x:\n",
        "\t\t\t\t\tcnt += 1\n",
        "\t\t\tcurr = curr.next\n",
        "\t\treturn cnt\n",
        "\n",
        "\tdef extend(self, a): # 여기서 a는 self와 같은 타입의 리스트\n",
        "\t\tfor index in range(a.size()):\n",
        "\t\t\tself.append(a.get(index))\n",
        " \n",
        "\tdef copy(self):\n",
        "\t\ta = LinkedListBasic()\n",
        "\t\tfor index in range(self.__numItems):\n",
        "\t\t\ta.append(self.get(index))\n",
        "\t\treturn a\n",
        "\n",
        "\tdef reverse(self):\n",
        "\t\ta = LinkedListBasic()\n",
        "\t\tfor index in range(self.__numItems):\n",
        "\t\t\ta.insert(0, self.get(index))\n",
        "\t\tself.clear()\n",
        "\t\tfor index in range(a.size()):\n",
        "\t\t\tself.append(a.get(index))\n",
        "\n",
        "\tdef sort(self) -> None:\n",
        "\t\ta = []\n",
        "\t\tfor index in range(self.__numItems):\n",
        "\t\t\ta.append(self.get(index))\n",
        "\t\ta.sort()\n",
        "\t\tself.clear()\n",
        "\t\tfor index in range(len(a)):\n",
        "\t\t\tself.append(a[index])\n",
        " \n",
        "\tdef __findNode(self, x) -> (ListNode, ListNode):\n",
        "\t\tprev = self.__head  # 더미 헤드\n",
        "\t\tcurr = prev.next    # 0번 노드 (즉, 첫번째 노드)\n",
        "\t\twhile curr != None:\n",
        "\t\t\tif curr.item == x:\n",
        "\t\t\t\treturn (prev, curr)\n",
        "\t\t\telse:\n",
        "\t\t\t\tprev = curr; curr = curr.next\n",
        "\t\treturn (None, None)\n",
        "\n",
        "\t# [알고리즘 5-6] 구현: 연결 리스트의 i번 노드 알려주기\n",
        "\tdef __getNode(self, i:int) -> ListNode:\n",
        "\t\tcurr = self.__head # 더미 헤드, index: -1\n",
        "\t\tfor index in range(i+1):\n",
        "\t\t\tcurr = curr.next\n",
        "\t\treturn curr\n",
        "\n",
        "\tdef printList(self):\n",
        "\t\tcurr = self.__head.next  # 0번 인덱스 노드:  더미 헤드 다음 노드 (즉, 첫번째 노드)\n",
        "\t\twhile curr != None:\n",
        "\t\t\tprint(curr.item, end = ' ')\n",
        "\t\t\tcurr = curr.next\n",
        "\t\tprint()\n",
        "\t\n",
        "\tdef contains(self,x) -> bool:\n",
        "\t\treturn self.index(x) != -2\n",
        "\t\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "a=LinkedListBasic()\n",
        "print(a.isEmpty())\n",
        "\n",
        "a.insert(0,1)\n",
        "a.insert(1,2)\n",
        "a.insert(2,\"'test'\")\n",
        "a.insert(3,3)\n",
        "a.insert(4,4)\n",
        "a.insert(5,5)\n",
        "a.insert(6,\"'algorithm'\")\n",
        "\n",
        "a.printList()\n",
        "print(\"노드의 수: \",a.size())\n",
        "\n",
        "print(\"\\n-----남은 노드가 k 값보다 작은 경우-----\")\n",
        "print(\"pop(1,2) 호출\\n\")\n",
        "a.pop(1,2)\n",
        "a.printList()\n",
        "print(\"노드의 수: \",a.size())\n",
        "\n",
        "print(\"\\n-----남은 노드가 k 값보다 많은 경우-----\")\n",
        "print(\"pop(3,3) 호출\\n\")\n",
        "a.pop(3,3)\n",
        "a.printList()\n",
        "print(\"노드의 수: \",a.size())\n",
        "\n",
        "print(\"\\n-----원래의 pop(index)의 역할을 하는 경우-----\")\n",
        "print(\"pop(1,1) 호출\\n\")\n",
        "a.pop(1,1)\n",
        "a.printList()\n",
        "print(\"노드의 수: \",a.size())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SyRRqGiXh-Y_",
        "outputId": "c65cea8a-d39a-4fa5-de36-5b9c520922aa"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "1 2 'test' 3 4 5 'algorithm' \n",
            "노드의 수:  7\n",
            "\n",
            "-----남은 노드가 k 값보다 작은 경우-----\n",
            "pop(1,2) 호출\n",
            "\n",
            "1 3 4 5 'algorithm' \n",
            "노드의 수:  5\n",
            "\n",
            "-----남은 노드가 k 값보다 많은 경우-----\n",
            "pop(3,3) 호출\n",
            "\n",
            "1 3 4 \n",
            "노드의 수:  3\n",
            "\n",
            "-----원래의 pop(index)의 역할을 하는 경우-----\n",
            "pop(1,1) 호출\n",
            "\n",
            "1 4 \n",
            "노드의 수:  2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "남은 노드가 k 값보다 많은 경우 k값에 3을 넣었지만, 남은 노드가 2개임으로 최대 노드인 마지막 노드까지만 삭제한다. "
      ],
      "metadata": {
        "id": "qIQhDWqkze26"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 문제 2번: int 타입의 원소들이 오름차순으로 정렬되는 add(x)를 구현하라.\n",
        "# 구현 부분: line 153 ~ 165\n",
        "class BidirectNode:\n",
        "    def __init__(self, x, prevNode:'BidirectNode', nextNode:'BidirectNode'):\n",
        "        self.item = x\n",
        "        self.prev = prevNode\n",
        "        self.next = nextNode\n",
        "        \n",
        "# 코드 5-24\n",
        "\n",
        "class CircularDoublyLinkedList:\n",
        "\tdef __init__(self):\n",
        "\t\tself.__head = BidirectNode(\"dummy\", None, None)\n",
        "\t\tself.__head.prev = self.__head\n",
        "\t\tself.__head.next = self.__head\n",
        "\t\tself.__numItems = 0\n",
        " \n",
        "\tdef insert(self, i:int, newItem) -> None:\n",
        "\t\tif (i >= 0 and i <= self.__numItems):\n",
        "\t\t\tprev = self.getNode(i - 1)\n",
        "\t\t\tnewNode = BidirectNode(newItem, prev, prev.next)\n",
        "\t\t\tnewNode.next.prev = newNode\n",
        "\t\t\tprev.next = newNode\n",
        "\t\t\tself.__numItems += 1\n",
        "\t\telse:\n",
        "\t\t\tprint(\"index\", i, \": out of bound in insert()\") # 필요 시 에러 처리\n",
        "\n",
        "\tdef append(self, newItem) -> None:\n",
        "\t\tprev = self.__head.prev\n",
        "\t\tnewNode = BidirectNode(newItem, prev, self.__head)\n",
        "\t\tprev.next = newNode\n",
        "\t\tself.__head.prev = newNode\n",
        "\t\tself.__numItems += 1\n",
        "\n",
        "\tdef pop(self, *args):\n",
        "\t\t# 가변 파라미터. 인자가 없거나 -1이면 마지막 원소로 처리하기 위함. 파이썬 리스트 규칙 만족\n",
        "\t\tif self.isEmpty():\n",
        "\t\t\treturn None\n",
        "\t\t# 인덱스 i 결정\n",
        "\t\tif len(args) != 0: # pop(k)과 같이 인자가 있으면 i = k 할당\n",
        "\t\t\ti = args[0]\n",
        "\t\tif len(args) == 0 or i == -1:# pop()에 인자가 없거나 pop(-1)이면 i에 맨 끝 인덱스 할당\n",
        "\t\t\ti = self.__numItems - 1\n",
        "\t\t# i번 원소 삭제\n",
        "\t\tif (i >= 0 and i <= self.__numItems - 1):\n",
        "\t\t\tcurr = self.getNode(i)\n",
        "\t\t\tretItem = curr.item\n",
        "\t\t\tcurr.prev.next = curr.next\n",
        "\t\t\tcurr.next.prev = curr.prev\n",
        "\t\t\tself.__numItems -= 1\n",
        "\t\t\treturn retItem\n",
        "\t\telse:\n",
        "\t\t\treturn None\n",
        " \n",
        "\tdef remove(self, x):\n",
        "\t\tcurr = self.__findNode(x)\n",
        "\t\tif curr != None:\n",
        "\t\t\tcurr.prev.next = curr.next\n",
        "\t\t\tcurr.next.prev = curr.prev\n",
        "\t\t\tself.__numItems -= 1\n",
        "\t\t\treturn x\n",
        "\t\telse:\n",
        "\t\t\treturn None\n",
        "\n",
        "\tdef get(self, *args):\n",
        "\t\t# 가변 파라미터. 인자가 없거나 -1이면 마지막 원소로 처리하기 위함. 파이썬 리스트 규칙 만족\n",
        "\t\tif self.isEmpty(): return None\n",
        "\t\t# 인덱스 i 결정\n",
        "\t\tif len(args) != 0:   # pop(k)과 같이 인자가 있으면 i = k 할당\n",
        "\t\t\ti = args[0]\n",
        "\t\tif len(args) == 0 or i == -1:# pop()에 인자가 없거나 pop(-1)이면 i에 맨 끝 인덱스 할당\n",
        "\t\t\ti = self.__numItems - 1\n",
        "\t\t# i번 원소 리턴\n",
        "\t\tif (i >= 0 and i <= self.__numItems - 1):\n",
        "\t\t\treturn self.getNode(i).item\n",
        "\t\telse:\n",
        "\t\t\treturn None\n",
        " \n",
        "\tdef index(self, x) -> int:\n",
        "\t\tcnt = 0\n",
        "\t\tfor element in self:\n",
        "\t\t\tif element == x:\n",
        "\t\t\t\treturn cnt\n",
        "\t\t\tcnt += 1\n",
        "\t\treturn -12345\n",
        "\n",
        "\tdef isEmpty(self) -> bool:\n",
        "\t\treturn self.__numItems == 0\n",
        " \n",
        "\tdef size(self) -> int:\n",
        "\t\treturn self.__numItems\n",
        "\n",
        "\tdef clear(self):\n",
        "\t\tself.__head = BidirectNode(\"dummy\", None, None)\n",
        "\t\tself.__head.prev = self.__head\n",
        "\t\tself.__head.next = self.__head\n",
        "\t\tself.__numItems = 0\n",
        " \n",
        "\tdef count(self, x) -> int:\n",
        "\t\tcnt = 0\n",
        "\t\tfor element in self:\n",
        "\t\t\tif element == x:\n",
        "\t\t\t\t\tcnt += 1\n",
        "\t\treturn cnt\n",
        "\n",
        "\tdef extend(self, a): # a는 순회 가능한 모든 객체\n",
        "\t\tfor element in a:\n",
        "\t\t\tself.append(element)\n",
        "\n",
        "\tdef copy(self) -> 'CircularDoublyLinkedList':\n",
        "\t\ta = CircularDoublyLinkedList()\n",
        "\t\tfor element in self:\n",
        "\t\t\ta.append(element)\n",
        "\t\treturn a\n",
        " \n",
        "\tdef reverse(self) -> None:\n",
        "\t\tprev = self.__head; curr = prev.next; next = curr.next\n",
        "\t\tself.__head.next = prev.prev; self.__head.prev = curr\n",
        "\t\tfor i in range(self.__numItems):\n",
        "\t\t\tcurr.next = prev; curr.prev = next\n",
        "\t\t\tprev = curr; curr = next; next = next.next\n",
        " \n",
        "\tdef sort(self) -> None:\n",
        "\t\ta = []\n",
        "\t\tfor element in self:\n",
        "\t\t\ta.append(element)\n",
        "\t\ta.sort()\n",
        "\t\tself.clear()\n",
        "\t\tfor element in a:\n",
        "\t\t\tself.append(element)\n",
        "\n",
        "\tdef __findNode(self, x) -> BidirectNode:\n",
        "\t\tcurr = self.__head.next  # 0번 노드\n",
        "\t\twhile curr != self.__head:\n",
        " \n",
        "\t\t\tif curr.item == x:\n",
        "\t\t\t\treturn curr\n",
        "\t\t\telse:\n",
        "\t\t\t\tcurr = curr.next\n",
        "\t\treturn None\n",
        "\n",
        "\tdef getNode(self, i:int) -> BidirectNode:\n",
        "\t\tcurr = self.__head  # 더미 헤드, index: -1\n",
        "\t\tfor index in range(i + 1):\n",
        "\t\t\tcurr = curr.next\n",
        "\t\treturn curr\n",
        "    \n",
        "\tdef printList(self) -> None:\n",
        "\t\tfor element in self:\n",
        "\t\t\tprint(element, end = ' ')\n",
        "\t\tprint()\n",
        "\t\n",
        "\t# 문제 2번 구현부분\n",
        "\tdef add(self,x:int)-> None:\n",
        "\t\tif self.isEmpty():\t# 리스트가 비어있을 때 맨 마지막에 원소를 삽입\n",
        "\t\t\tself.append(x);\n",
        "\t\telse:\n",
        "\t\t\tfor i in range(0,self.__numItems):\t# 인덱스의 크기만큼 반복\n",
        "\t\t\t\tcurr = self.getNode(i)\n",
        "\t\t\t\tItem = curr.item\t\t# 인덱스가 가지고 있는 값을 저장\n",
        "\t\t\t\tif Item > x:\t# 해당 인덱스의 값이 x보다 클 때\n",
        "\t\t\t\t\tself.insert(i,x)\t#해당 인덱스에 x 삽입\n",
        "\t\t\t\t\tbreak\n",
        "\t\t\t\telif (i == self.__numItems-1):\t# i가 마지막일 때\n",
        "\t\t\t\t\tself.append(x)\t# 맨 마지막에 원소를 삽입\n",
        "\t\t\t\t\t\t\t\t\n",
        "\n",
        " \n",
        "\tdef __iter__(self):  # generating iterator and return\n",
        "\t\treturn CircularDoublyLinkedListIterator(self)\n",
        " \n",
        "class CircularDoublyLinkedListIterator:\n",
        "\tdef __init__(self, alist):\n",
        "\t\tself.__head = alist.getNode(-1)  \t\t# 더미 헤드\n",
        "\t\tself.iterPosition = self.__head.next  \t# 0번 노드\n",
        "\tdef __next__(self):\n",
        "\t\tif self.iterPosition == self.__head: \t# 순환 끝\n",
        "\t\t\traise StopIteration\n",
        "\t\telse: # 현재 원소를 리턴하면서 다음 원소로 이동\n",
        "\t\t\titem = self.iterPosition.item\n",
        "\t\t\tself.iterPosition = self.iterPosition.next\n",
        "\t\t\treturn item\n",
        "\n",
        "# 코드 5-25"
      ],
      "metadata": {
        "id": "R3lJGbCH5szl"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "list = CircularDoublyLinkedList()\n",
        "\n",
        "list.add(10)\n",
        "list.add(2)\n",
        "list.add(5)\n",
        "list.add(15)\n",
        "list.add(30)\n",
        "list.add(1)\n",
        "list.add(100)\n",
        "list.printList()\n",
        "\n",
        "print(\"\\n-----가장 작은 수 1 추가-----\")\n",
        "list.add(1)\n",
        "list.printList()\n",
        "\n",
        "print(\"\\n-----중간 수 12 추가-----\")\n",
        "list.add(12)\n",
        "list.printList()\n",
        "\n",
        "print(\"\\n-----가장 큰 수 200 추가-----\")\n",
        "list.add(200)\n",
        "list.printList()\n",
        "\n",
        "# 코드 5-26"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7i55xRNg5uro",
        "outputId": "2b1841a0-40e0-45be-e3d2-7c8b1ffb7f34"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 2 5 10 15 30 100 \n",
            "\n",
            "-----가장 작은 수 1 추가-----\n",
            "1 1 2 5 10 15 30 100 \n",
            "\n",
            "-----중간 수 12 추가-----\n",
            "1 1 2 5 10 12 15 30 100 \n",
            "\n",
            "-----가장 큰 수 200 추가-----\n",
            "1 1 2 5 10 12 15 30 100 200 \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "오름차순 정렬로 인해 추가한 가장 작은 수는 첫번째 노드로, 중간 수는 오름차순에 맞는 위치로, 가장 큰 수는 가장 마지막 노드로 정렬됨을 확인할 수 있다.  "
      ],
      "metadata": {
        "id": "Bf7Z2cnK-VYb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 문제 3번: 문자열을 받아 괄호 '(', ')'의 좌우 균형이 맞는지 확인하는 코드를 스택을 사용하여 구현하라.\n",
        "# 구현 부분: line 31 ~ 44\n",
        "class ListStack:\n",
        "\tdef __init__(self):\n",
        "\t\tself.__stack = []\n",
        "\n",
        "\tdef push(self, x):\n",
        "\t\tself.__stack.append(x)\n",
        "\n",
        "\tdef pop(self):\n",
        "\t\treturn self.__stack.pop()\n",
        "\n",
        "\tdef top(self):\n",
        "\t\tif self.isEmpty():\n",
        "\t\t\treturn None\n",
        "\t\telse:\n",
        "\t\t\treturn self.__stack[-1]\n",
        "\n",
        "\tdef isEmpty(self) -> bool:\n",
        "\t\treturn not bool(self.__stack)\n",
        "\n",
        "\tdef popAll(self):\n",
        "\t\tself.__stack.clear() \n",
        "\n",
        "\tdef printStack(self):\n",
        "\t\tprint(\"Stack from top:\", end = ' ')\n",
        "\t\tfor i in range(len(self.__stack)-1, -1, -1):\n",
        "\t\t\tprint(self.__stack[i], end = ' ')\n",
        "\t\tprint()\n",
        "\t\n",
        "# 문제 3번 구현 부분\n",
        "\tdef parenBalance(self, s : str)-> bool:\n",
        "\t\tlength=len(s) # 문자열의 길이를 받아옴\n",
        "\t\tfor i in range(0,length): # 문자열의 길이만큼 반복\n",
        "\t\t\tif s[i] == \"(\":     # 열린 괄호가 나왔을 때\n",
        "\t\t\t\tself.push(\"(\")    # 스택에 열린 괄호를 삽입\n",
        "\t\t\telif s[i] == \")\":   # 닫힌 괄호가 나왔을 때\n",
        "\t\t\t\tif self.isEmpty():  # 만약 스택에 열린 괄호가 없다면\n",
        "\t\t\t\t\treturn False      # 괄호 개수가 맞지 않으므로 False\n",
        "\t\t\t\tself.pop()  # 아니라면 pop()\n",
        "\t\tif (not self.isEmpty()):  # 스택이 비어있지 않다면 False\n",
        "\t\t\treturn False\n",
        "\t\telse:   # 스택이 비어있다면 True\n",
        "\t\t\treturn True \n",
        "\n",
        "\n",
        "# 코드 6-6"
      ],
      "metadata": {
        "id": "BigpUcKcGAc-"
      },
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "st1 = ListStack()\n",
        "\n",
        "print(\"괄호 균형이 맞는 경우: \",st1.parenBalance(\"1(2((3()4)5))\"))\n",
        "print(\"괄호 균형이 맞지 않는 경우: \",st1.parenBalance(\"(a((b)c(d)e))f)\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1DsMhEr_GEl_",
        "outputId": "dac142e3-e1ad-40f2-b0c2-a6819ff5a486"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "괄호 균형이 맞는 경우:  True\n",
            "괄호 균형이 맞지 않는 경우:  False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "구현 후 지난 자료구조 수업 때 구현한 코드를 참고하여 검토하였습니다. "
      ],
      "metadata": {
        "id": "__64J1pWRJh4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 문제 4번:  ListQueue 클래스 정의를 기반으로 Deque 클래스를 구현하라. 즉, enqueueFront(), enqueueRear(), dequeueFront(), dequeueRear() 구현.\n",
        "# 구현 부분: line 7 ~ 22\n",
        "class ListQueue:\n",
        "\tdef __init__(self):\n",
        "\t\tself.__queue = []\n",
        "\n",
        "# 문제 4번 구현 부분\n",
        "  # Front에 원소 삽입\n",
        "\tdef enqueueFront(self,x):\n",
        "\t\tself.__queue.insert(0,x)  # index 0번에 x를 삽입\n",
        "\n",
        "\t# Rear에 원소 삽입, 기존의 enqueue와 동일\n",
        "\tdef enqueueRear(self,x):\n",
        "\t\tself.__queue.append(x)\n",
        "\n",
        "\t# Front에서 원소 삭제, 기존의 dequeue와 동일\n",
        "\tdef dequeueFront(self):\n",
        "\t\treturn self.__queue.pop(0) # .pop(0): 리스트의 첫 원소를 삭제한 후 원소 리턴\n",
        "\n",
        "  # Rear에서 원소 삭제\n",
        "\tdef dequeueRear(self):\n",
        "\t\treturn self.__queue.pop(len(self.__queue)-1)  # 인덱스는 0부터 시작하기 때문에 (전체 길이 - 1) 번째 원소를 삭제 후 리턴\n",
        "\n",
        "\tdef front(self):\n",
        "\t\tif self.isEmpty():\n",
        "\t\t\treturn None\n",
        "\t\telse:\n",
        "\t\t\treturn self.__queue[0]\n",
        "\n",
        "\tdef isEmpty(self) -> bool:\n",
        "\t\treturn (len(self.__queue) == 0);\n",
        " \n",
        "\tdef dequeueAll(self):\n",
        "\t\tself.__queue.clear()\n",
        "\n",
        "\tdef printQueue(self):\n",
        "\t\tprint(\"Queue from front:\", end = ' ')\n",
        "\t\tfor i in range(len(self.__queue)):\n",
        "\t\t\tprint(self.__queue[i], end = ' ')\n",
        "\t\tprint()\n",
        "\t\n"
      ],
      "metadata": {
        "id": "VR5yqlL_SoRV"
      },
      "execution_count": 118,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "q1 = ListQueue()\n",
        "q1.enqueueRear(\"Mon\")\n",
        "q1.enqueueRear(\"Tue\")\n",
        "q1.enqueueRear(1234)\n",
        "q1.enqueueRear(\"Wed\")\n",
        "q1.printQueue()\n",
        "\n",
        "print(\"\\nFront에서 원소 삭제하는 dequeueFront() 실행\")\n",
        "q1.dequeueFront()\n",
        "q1.printQueue()\n",
        "\n",
        "print(\"\\nRear에 원소 삽입하는 enqueueRear() 실행\")\n",
        "q1.enqueueRear('aaa')\n",
        "q1.printQueue()\n",
        "\n",
        "print(\"\\nFront에 원소 삽입하는 enqueueFront() 실행\")\n",
        "q1.enqueueFront('bbb')\n",
        "q1.printQueue()\n",
        "\n",
        "print(\"\\nRear에서  원소 삭제하는 dequeueRear() 실행\")\n",
        "q1.dequeueRear()\n",
        "q1.printQueue()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HaRXrANYUP09",
        "outputId": "f0bc4b33-a50e-427d-c4a8-324bccdc01aa"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Queue from front: Mon Tue 1234 Wed \n",
            "\n",
            "Front에서 원소 삭제하는 dequeueFront() 실행\n",
            "Queue from front: Tue 1234 Wed \n",
            "\n",
            "Rear에 원소 삽입하는 enqueueRear() 실행\n",
            "Queue from front: Tue 1234 Wed aaa \n",
            "\n",
            "Front에 원소 삽입하는 enqueueFront() 실행\n",
            "Queue from front: bbb Tue 1234 Wed aaa \n",
            "\n",
            "Rear에서  원소 삭제하는 dequeueRear() 실행\n",
            "Queue from front: bbb Tue 1234 Wed \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "왼쪽을 Front, 오른쪽을 Rear로 했을 때 이름에 맞춰 올바르게 enqueue, dequeue됨을 확인할 수 있다. "
      ],
      "metadata": {
        "id": "22yieJNRY3ec"
      }
    }
  ]
}
